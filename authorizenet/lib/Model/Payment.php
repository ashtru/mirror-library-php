<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Authorize.net REST API
 *
 * Authorize.net REST API
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Payment Class Doc Comment
 *
 * @category    Class
 * @description Model for Payment
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Payment implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        '_links' => '\Swagger\Client\Model\PaymentLinks',
        'id' => 'string',
        'solution' => '\Swagger\Client\Model\Solution',
        'batch' => '\Swagger\Client\Model\Batch',
        'submit_time_utc' => 'string',
        'submit_time_local' => 'string',
        'transaction_status' => 'string',
        'processor' => '\Swagger\Client\Model\Processor',
        'recurring_billing' => 'bool',
        'customer_ip' => 'string',
        'order' => '\Swagger\Client\Model\Order',
        'auth_amount' => 'string',
        'settle_amount' => 'string',
        'tax' => '\Swagger\Client\Model\ExtendedAmount',
        'shipping' => '\Swagger\Client\Model\ExtendedAmount',
        'duty' => '\Swagger\Client\Model\ExtendedAmount',
        'line_items' => '\Swagger\Client\Model\LineItem[]',
        'tax_exempt' => 'bool',
        'payment_instrument' => '\Swagger\Client\Model\PaymentInstrument',
        'fraud_information' => '\Swagger\Client\Model\FraudInformation',
        'customer_id' => 'string',
        'bill_to' => '\Swagger\Client\Model\BaseAddress',
        'ship_to' => '\Swagger\Client\Model\BaseAddress'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        '_links' => '_links',
        'id' => 'id',
        'solution' => 'solution',
        'batch' => 'batch',
        'submit_time_utc' => 'submitTimeUTC',
        'submit_time_local' => 'submitTimeLocal',
        'transaction_status' => 'transactionStatus',
        'processor' => 'processor',
        'recurring_billing' => 'recurringBilling',
        'customer_ip' => 'customerIp',
        'order' => 'order',
        'auth_amount' => 'authAmount',
        'settle_amount' => 'settleAmount',
        'tax' => 'tax',
        'shipping' => 'shipping',
        'duty' => 'duty',
        'line_items' => 'lineItems',
        'tax_exempt' => 'taxExempt',
        'payment_instrument' => 'paymentInstrument',
        'fraud_information' => 'fraudInformation',
        'customer_id' => 'customerId',
        'bill_to' => 'billTo',
        'ship_to' => 'shipTo'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        '_links' => 'setLinks',
        'id' => 'setId',
        'solution' => 'setSolution',
        'batch' => 'setBatch',
        'submit_time_utc' => 'setSubmitTimeUtc',
        'submit_time_local' => 'setSubmitTimeLocal',
        'transaction_status' => 'setTransactionStatus',
        'processor' => 'setProcessor',
        'recurring_billing' => 'setRecurringBilling',
        'customer_ip' => 'setCustomerIp',
        'order' => 'setOrder',
        'auth_amount' => 'setAuthAmount',
        'settle_amount' => 'setSettleAmount',
        'tax' => 'setTax',
        'shipping' => 'setShipping',
        'duty' => 'setDuty',
        'line_items' => 'setLineItems',
        'tax_exempt' => 'setTaxExempt',
        'payment_instrument' => 'setPaymentInstrument',
        'fraud_information' => 'setFraudInformation',
        'customer_id' => 'setCustomerId',
        'bill_to' => 'setBillTo',
        'ship_to' => 'setShipTo'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        '_links' => 'getLinks',
        'id' => 'getId',
        'solution' => 'getSolution',
        'batch' => 'getBatch',
        'submit_time_utc' => 'getSubmitTimeUtc',
        'submit_time_local' => 'getSubmitTimeLocal',
        'transaction_status' => 'getTransactionStatus',
        'processor' => 'getProcessor',
        'recurring_billing' => 'getRecurringBilling',
        'customer_ip' => 'getCustomerIp',
        'order' => 'getOrder',
        'auth_amount' => 'getAuthAmount',
        'settle_amount' => 'getSettleAmount',
        'tax' => 'getTax',
        'shipping' => 'getShipping',
        'duty' => 'getDuty',
        'line_items' => 'getLineItems',
        'tax_exempt' => 'getTaxExempt',
        'payment_instrument' => 'getPaymentInstrument',
        'fraud_information' => 'getFraudInformation',
        'customer_id' => 'getCustomerId',
        'bill_to' => 'getBillTo',
        'ship_to' => 'getShipTo'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['solution'] = isset($data['solution']) ? $data['solution'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['submit_time_utc'] = isset($data['submit_time_utc']) ? $data['submit_time_utc'] : null;
        $this->container['submit_time_local'] = isset($data['submit_time_local']) ? $data['submit_time_local'] : null;
        $this->container['transaction_status'] = isset($data['transaction_status']) ? $data['transaction_status'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
        $this->container['recurring_billing'] = isset($data['recurring_billing']) ? $data['recurring_billing'] : null;
        $this->container['customer_ip'] = isset($data['customer_ip']) ? $data['customer_ip'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['auth_amount'] = isset($data['auth_amount']) ? $data['auth_amount'] : null;
        $this->container['settle_amount'] = isset($data['settle_amount']) ? $data['settle_amount'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['shipping'] = isset($data['shipping']) ? $data['shipping'] : null;
        $this->container['duty'] = isset($data['duty']) ? $data['duty'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['tax_exempt'] = isset($data['tax_exempt']) ? $data['tax_exempt'] : null;
        $this->container['payment_instrument'] = isset($data['payment_instrument']) ? $data['payment_instrument'] : null;
        $this->container['fraud_information'] = isset($data['fraud_information']) ? $data['fraud_information'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['bill_to'] = isset($data['bill_to']) ? $data['bill_to'] : null;
        $this->container['ship_to'] = isset($data['ship_to']) ? $data['ship_to'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets _links
     * @return \Swagger\Client\Model\PaymentLinks
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     * @param \Swagger\Client\Model\PaymentLinks $_links
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets solution
     * @return \Swagger\Client\Model\Solution
     */
    public function getSolution()
    {
        return $this->container['solution'];
    }

    /**
     * Sets solution
     * @param \Swagger\Client\Model\Solution $solution
     * @return $this
     */
    public function setSolution($solution)
    {
        $this->container['solution'] = $solution;

        return $this;
    }

    /**
     * Gets batch
     * @return \Swagger\Client\Model\Batch
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     * @param \Swagger\Client\Model\Batch $batch
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets submit_time_utc
     * @return string
     */
    public function getSubmitTimeUtc()
    {
        return $this->container['submit_time_utc'];
    }

    /**
     * Sets submit_time_utc
     * @param string $submit_time_utc
     * @return $this
     */
    public function setSubmitTimeUtc($submit_time_utc)
    {
        $this->container['submit_time_utc'] = $submit_time_utc;

        return $this;
    }

    /**
     * Gets submit_time_local
     * @return string
     */
    public function getSubmitTimeLocal()
    {
        return $this->container['submit_time_local'];
    }

    /**
     * Sets submit_time_local
     * @param string $submit_time_local
     * @return $this
     */
    public function setSubmitTimeLocal($submit_time_local)
    {
        $this->container['submit_time_local'] = $submit_time_local;

        return $this;
    }

    /**
     * Gets transaction_status
     * @return string
     */
    public function getTransactionStatus()
    {
        return $this->container['transaction_status'];
    }

    /**
     * Sets transaction_status
     * @param string $transaction_status
     * @return $this
     */
    public function setTransactionStatus($transaction_status)
    {
        $this->container['transaction_status'] = $transaction_status;

        return $this;
    }

    /**
     * Gets processor
     * @return \Swagger\Client\Model\Processor
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     * @param \Swagger\Client\Model\Processor $processor
     * @return $this
     */
    public function setProcessor($processor)
    {
        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets recurring_billing
     * @return bool
     */
    public function getRecurringBilling()
    {
        return $this->container['recurring_billing'];
    }

    /**
     * Sets recurring_billing
     * @param bool $recurring_billing
     * @return $this
     */
    public function setRecurringBilling($recurring_billing)
    {
        $this->container['recurring_billing'] = $recurring_billing;

        return $this;
    }

    /**
     * Gets customer_ip
     * @return string
     */
    public function getCustomerIp()
    {
        return $this->container['customer_ip'];
    }

    /**
     * Sets customer_ip
     * @param string $customer_ip
     * @return $this
     */
    public function setCustomerIp($customer_ip)
    {
        $this->container['customer_ip'] = $customer_ip;

        return $this;
    }

    /**
     * Gets order
     * @return \Swagger\Client\Model\Order
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     * @param \Swagger\Client\Model\Order $order
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets auth_amount
     * @return string
     */
    public function getAuthAmount()
    {
        return $this->container['auth_amount'];
    }

    /**
     * Sets auth_amount
     * @param string $auth_amount
     * @return $this
     */
    public function setAuthAmount($auth_amount)
    {
        $this->container['auth_amount'] = $auth_amount;

        return $this;
    }

    /**
     * Gets settle_amount
     * @return string
     */
    public function getSettleAmount()
    {
        return $this->container['settle_amount'];
    }

    /**
     * Sets settle_amount
     * @param string $settle_amount
     * @return $this
     */
    public function setSettleAmount($settle_amount)
    {
        $this->container['settle_amount'] = $settle_amount;

        return $this;
    }

    /**
     * Gets tax
     * @return \Swagger\Client\Model\ExtendedAmount
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     * @param \Swagger\Client\Model\ExtendedAmount $tax
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets shipping
     * @return \Swagger\Client\Model\ExtendedAmount
     */
    public function getShipping()
    {
        return $this->container['shipping'];
    }

    /**
     * Sets shipping
     * @param \Swagger\Client\Model\ExtendedAmount $shipping
     * @return $this
     */
    public function setShipping($shipping)
    {
        $this->container['shipping'] = $shipping;

        return $this;
    }

    /**
     * Gets duty
     * @return \Swagger\Client\Model\ExtendedAmount
     */
    public function getDuty()
    {
        return $this->container['duty'];
    }

    /**
     * Sets duty
     * @param \Swagger\Client\Model\ExtendedAmount $duty
     * @return $this
     */
    public function setDuty($duty)
    {
        $this->container['duty'] = $duty;

        return $this;
    }

    /**
     * Gets line_items
     * @return \Swagger\Client\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     * @param \Swagger\Client\Model\LineItem[] $line_items
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets tax_exempt
     * @return bool
     */
    public function getTaxExempt()
    {
        return $this->container['tax_exempt'];
    }

    /**
     * Sets tax_exempt
     * @param bool $tax_exempt
     * @return $this
     */
    public function setTaxExempt($tax_exempt)
    {
        $this->container['tax_exempt'] = $tax_exempt;

        return $this;
    }

    /**
     * Gets payment_instrument
     * @return \Swagger\Client\Model\PaymentInstrument
     */
    public function getPaymentInstrument()
    {
        return $this->container['payment_instrument'];
    }

    /**
     * Sets payment_instrument
     * @param \Swagger\Client\Model\PaymentInstrument $payment_instrument
     * @return $this
     */
    public function setPaymentInstrument($payment_instrument)
    {
        $this->container['payment_instrument'] = $payment_instrument;

        return $this;
    }

    /**
     * Gets fraud_information
     * @return \Swagger\Client\Model\FraudInformation
     */
    public function getFraudInformation()
    {
        return $this->container['fraud_information'];
    }

    /**
     * Sets fraud_information
     * @param \Swagger\Client\Model\FraudInformation $fraud_information
     * @return $this
     */
    public function setFraudInformation($fraud_information)
    {
        $this->container['fraud_information'] = $fraud_information;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets bill_to
     * @return \Swagger\Client\Model\BaseAddress
     */
    public function getBillTo()
    {
        return $this->container['bill_to'];
    }

    /**
     * Sets bill_to
     * @param \Swagger\Client\Model\BaseAddress $bill_to
     * @return $this
     */
    public function setBillTo($bill_to)
    {
        $this->container['bill_to'] = $bill_to;

        return $this;
    }

    /**
     * Gets ship_to
     * @return \Swagger\Client\Model\BaseAddress
     */
    public function getShipTo()
    {
        return $this->container['ship_to'];
    }

    /**
     * Sets ship_to
     * @param \Swagger\Client\Model\BaseAddress $ship_to
     * @return $this
     */
    public function setShipTo($ship_to)
    {
        $this->container['ship_to'] = $ship_to;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
